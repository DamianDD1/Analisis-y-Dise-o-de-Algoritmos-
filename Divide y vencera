#include <stdio.h>
#include <stdlib.h>
#include <time.h>

void multiplyDaC(int** A, int** B, int** C, int n) {
    if (n == 1) {
        C[0][0] = A[0][0] * B[0][0];
        return;
    }
    
    int half = n / 2;
    
    int** A11 = (int*)malloc(half * sizeof(int));
    int** A12 = (int*)malloc(half * sizeof(int));
    int** A21 = (int*)malloc(half * sizeof(int));
    int** A22 = (int*)malloc(half * sizeof(int));
    int** B11 = (int*)malloc(half * sizeof(int));
    int** B12 = (int*)malloc(half * sizeof(int));
    int** B21 = (int*)malloc(half * sizeof(int));
    int** B22 = (int*)malloc(half * sizeof(int));
    int** C11 = (int*)malloc(half * sizeof(int));
    int** C12 = (int*)malloc(half * sizeof(int));
    int** C21 = (int*)malloc(half * sizeof(int));
    int** C22 = (int*)malloc(half * sizeof(int));
    
    for (int i = 0; i < half; i++) {
        A11[i] = (int*)malloc(half * sizeof(int));
        A12[i] = (int*)malloc(half * sizeof(int));
        A21[i] = (int*)malloc(half * sizeof(int));
        A22[i] = (int*)malloc(half * sizeof(int));
        B11[i] = (int*)malloc(half * sizeof(int));
        B12[i] = (int*)malloc(half * sizeof(int));
        B21[i] = (int*)malloc(half * sizeof(int));
        B22[i] = (int*)malloc(half * sizeof(int));
        C11[i] = (int*)malloc(half * sizeof(int));
        C12[i] = (int*)malloc(half * sizeof(int));
        C21[i] = (int*)malloc(half * sizeof(int));
        C22[i] = (int*)malloc(half * sizeof(int));
    }

    for (int i = 0; i < half; i++) {
        for (int j = 0; j < half; j++) {
            A11[i][j] = A[i][j];
            A12[i][j] = A[i][j + half];
            A21[i][j] = A[i + half][j];
            A22[i][j] = A[i + half][j + half];
            B11[i][j] = B[i][j];
            B12[i][j] = B[i][j + half];
            B21[i][j] = B[i + half][j];
            B22[i][j] = B[i + half][j + half];
        }
    }

    multiplyDaC(A11, B11, C11, half);
    multiplyDaC(A12, B21, C12, half);

    for (int i = 0; i < half; i++) {
        free(A11[i]);
        free(A12[i]);
        free(A21[i]);
        free(A22[i]);
        free(B11[i]);
        free(B12[i]);
        free(B21[i]);
        free(B22[i]);
        free(C11[i]);
        free(C12[i]);
        free(C21[i]);
        free(C22[i]);
    }
    free(A11);
    free(A12);
    free(A21);
    free(A22);
    free(B11);
    free(B12);
    free(B21);
    free(B22);
    free(C11);
    free(C12);
    free(C21);
    free(C22);
}

int main() {
    int n;
    printf("Ingrese el tamaño de la matriz (n x n, donde n es potencia de 2): ");
    scanf("%d", &n);

    int** A = (int*)malloc(n * sizeof(int));
    int** B = (int*)malloc(n * sizeof(int));
    int** C = (int*)malloc(n * sizeof(int));

    for (int i = 0; i < n; i++) {
        A[i] = (int*)malloc(n * sizeof(int));
        B[i] = (int*)malloc(n * sizeof(int));
        C[i] = (int*)malloc(n * sizeof(int));
        for (int j = 0; j < n; j++) {
            A[i][j] = rand() % 10;
            B[i][j] = rand() % 10;
            C[i][j] = 0;
        }
    }

    clock_t start = clock();
    multiplyDaC(A, B, C, n);
    clock_t end = clock();

    double time_taken = ((double)(end - start)) / CLOCKS_PER_SEC;
    printf("Tiempo de ejecución (DaC): %f segundos\n", time_taken);

    for (int i = 0; i < n; i++) {
        free(A[i]);
        free(B[i]);
        free(C[i]);
    }
    free(A);
    free(B);
    free(C);

    return 0;
}

-----------------------------------------------------

#include <stdio.h>
#include <stdlib.h>
#include <time.h>

// Función para multiplicar matrices de forma tradicional
void multiplyTraditional(int** A, int** B, int** C, int n) {
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            C[i][j] = 0;
            for (int k = 0; k < n; k++) {
                C[i][j] += A[i][k] * B[k][j];
            }
        }
    }
}

int main() {
    int n;
    printf("Ingrese el tamaño de la matriz (n x n, donde n es potencia de 2): ");
    scanf("%d", &n);

    // Crear las matrices A, B y C dinámicamente
    int** A = (int*)malloc(n * sizeof(int));
    int** B = (int*)malloc(n * sizeof(int));
    int** C = (int*)malloc(n * sizeof(int));

    // Inicializar las matrices A, B y C
    for (int i = 0; i < n; i++) {
        A[i] = (int*)malloc(n * sizeof(int));
        B[i] = (int*)malloc(n * sizeof(int));
        C[i] = (int*)malloc(n * sizeof(int));
        for (int j = 0; j < n; j++) {
            A[i][j] = rand() % 10; // Valores aleatorios entre 0 y 9
            B[i][j] = rand() % 10; // Valores aleatorios entre 0 y 9
            C[i][j] = 0; // Inicializamos la matriz C a cero
        }
    }

    // Medir el tiempo de ejecución
    clock_t start = clock();
    multiplyTraditional(A, B, C, n);
    clock_t end = clock();

    double time_taken = ((double)(end - start)) / CLOCKS_PER_SEC;
    printf("Tiempo de ejecución (Método Tradicional): %f segundos\n", time_taken);

    // Liberar la memoria de las matrices
    for (int i = 0; i < n; i++) {
        free(A[i]);
        free(B[i]);
        free(C[i]);
    }
    free(A);
    free(B);
    free(C);

    return 0;
}

-------------------------------------------------------------------------
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

void add(int** A, int** B, int** C, int n) {
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            C[i][j] = A[i][j] + B[i][j];
        }
    }
}

void subtract(int** A, int** B, int** C, int n) {
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            C[i][j] = A[i][j] - B[i][j];
        }
    }
}

void strassen(int** A, int** B, int** C, int n) {
    if (n == 1) {
        C[0][0] = A[0][0] * B[0][0];
        return;
    }

    int half = n / 2;

    // Dividir matrices A y B en submatrices
    // Similar al paso en DaC
    // ...

    // Llamar recursivamente a las submatrices
    // C11 = P1 + P4 - P5 + P7
    // C12 = P3 + P5
    // C21 = P2 + P4
    // C22 = P1 + P3 - P2 + P6
}

int main() {
    int n;
    printf("Ingrese el tamaño de la matriz (n x n, donde n es potencia de 2): ");
    scanf("%d", &n);

    int** A = (int*)malloc(n * sizeof(int));
    int** B = (int*)malloc(n * sizeof(int));
    int** C = (int*)malloc(n * sizeof(int));

    for (int i = 0; i < n; i++) {
        A[i] = (int*)malloc(n * sizeof(int));
        B[i] = (int*)malloc(n * sizeof(int));
        C[i] = (int*)malloc(n * sizeof(int));
        for (int j = 0; j < n; j++) {
            A[i][j] = rand() % 10;
            B[i][j] = rand() % 10;
            C[i][j] = 0;
        }
    }

    clock_t start = clock();
    strassen(A, B, C, n);
    clock_t end = clock();

    double time_taken = ((double)(end - start)) / CLOCKS_PER_SEC;
    printf("Tiempo de ejecución (Strassen): %f segundos\n", time_taken);

    for (int i = 0; i < n; i++) {
        free(A[i]);
        free(B[i]);
        free(C[i]);
    }
    free(A);
    free(B);
    free(C);

    return 0;
}
